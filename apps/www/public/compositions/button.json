{
  "type": "composition",
  "npmDependencies": [],
  "fileDependencies": [],
  "id": "button",
  "file": {
    "name": "button.tsx",
    "content": "import {\n  AbsoluteCenter,\n  Button as ChakraButton,\n  Span,\n  Spinner,\n} from \"@chakra-ui/react\"\nimport type { ButtonProps as ChakraButtonProps } from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\n\ninterface ButtonIconProps {\n  startIcon?: React.ReactElement\n  endIcon?: React.ReactElement\n}\n\ninterface ButtonLoadingProps {\n  loading?: boolean\n  loadingText?: React.ReactNode\n}\n\nexport interface ButtonProps\n  extends ChakraButtonProps,\n    ButtonIconProps,\n    ButtonLoadingProps {}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  function Button(props, ref) {\n    const {\n      loading,\n      disabled,\n      loadingText,\n      startIcon,\n      endIcon,\n      children,\n      ...rest\n    } = props\n\n    const trulyDisabled = loading || disabled\n    const showSpinner = loading && !loadingText\n\n    const content = (\n      <ButtonContent startIcon={startIcon} endIcon={endIcon}>\n        {children}\n      </ButtonContent>\n    )\n\n    return (\n      <ChakraButton disabled={trulyDisabled} ref={ref} {...rest}>\n        {showSpinner && <ButtonSpinner />}\n        {loading ? loadingText || <Span opacity={0}>{content}</Span> : content}\n      </ChakraButton>\n    )\n  },\n)\n\nconst ButtonContent = (props: React.PropsWithChildren<ButtonProps>) => {\n  const { children, startIcon, endIcon } = props\n  if (!startIcon && !endIcon) return children\n  return (\n    <>\n      {startIcon}\n      <span>{children}</span>\n      {endIcon}\n    </>\n  )\n}\n\nconst ButtonSpinner = () => (\n  <AbsoluteCenter display=\"inline-flex\">\n    <Spinner boxSize=\"1em\" color=\"currentColor\" />\n  </AbsoluteCenter>\n)\n"
  },
  "component": "Button"
}