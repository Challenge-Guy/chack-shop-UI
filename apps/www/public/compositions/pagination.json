{
  "type": "composition",
  "npmDependencies": ["react-icons"],
  "fileDependencies": [],
  "id": "pagination",
  "file": {
    "name": "pagination.tsx",
    "content": "\"use client\"\n\nimport type { RecipeProps } from \"@chakra-ui/react\"\nimport {\n  Button,\n  Pagination as ChakraPagination,\n  HStack,\n  IconButton,\n  Span,\n  Text,\n  Wrap,\n  createContext,\n  usePaginationContext,\n} from \"@chakra-ui/react\"\nimport { forwardRef } from \"react\"\nimport {\n  HiChevronLeft,\n  HiChevronRight,\n  HiMiniEllipsisHorizontal,\n} from \"react-icons/hi2\"\n\ninterface ButtonVariantProps extends RecipeProps<\"button\"> {}\n\ninterface ButtonVariantContext {\n  size?: ButtonVariantProps[\"size\"]\n}\n\nexport interface PaginationProps\n  extends ChakraPagination.RootProps,\n    ButtonVariantContext {}\n\nexport const Pagination = forwardRef<HTMLDivElement, PaginationProps>(\n  function Pagination(props, ref) {\n    const { size = \"sm\", ...rest } = props\n    return (\n      <ButtonVariantProvider value={{ size }}>\n        <ChakraPagination.Root ref={ref} {...rest}>\n          <Wrap>\n            <PaginationPrevTrigger />\n            <PaginationItems />\n            <PaginationNextTrigger />\n          </Wrap>\n        </ChakraPagination.Root>\n      </ButtonVariantProvider>\n    )\n  },\n)\n\nexport interface SimplePaginationProps extends PaginationProps {\n  showPageText?: boolean\n}\n\nexport const SimplePagination = forwardRef<\n  HTMLDivElement,\n  SimplePaginationProps\n>(function SimplePagination(props, ref) {\n  const { size = \"sm\", showPageText, ...rest } = props\n  return (\n    <ButtonVariantProvider value={{ size }}>\n      <ChakraPagination.Root ref={ref} {...rest}>\n        <HStack>\n          <PaginationPrevTrigger />\n          {showPageText && <PaginationPageText />}\n          <PaginationNextTrigger />\n        </HStack>\n      </ChakraPagination.Root>\n    </ButtonVariantProvider>\n  )\n})\n\nconst [ButtonVariantProvider, useButtonVariant] =\n  createContext<ButtonVariantContext>({\n    name: \"ButtonVariantContext\",\n  })\n\nconst Ellipsis = forwardRef<HTMLDivElement, ChakraPagination.EllipsisProps>(\n  function Ellipsis(props, ref) {\n    const { size } = useButtonVariant()\n    return (\n      <ChakraPagination.Ellipsis ref={ref} index={props.index} asChild>\n        <Button variant=\"plain\" size={size}>\n          <HiMiniEllipsisHorizontal />\n        </Button>\n      </ChakraPagination.Ellipsis>\n    )\n  },\n)\n\nconst Item = forwardRef<HTMLButtonElement, ChakraPagination.ItemProps>(\n  function Item(props, ref) {\n    const { page } = usePaginationContext()\n    const current = page === props.value\n    const { size } = useButtonVariant()\n    return (\n      <ChakraPagination.Item ref={ref} {...props} asChild>\n        <Button variant={current ? \"solid\" : \"outline\"} size={size}>\n          {props.value}\n        </Button>\n      </ChakraPagination.Item>\n    )\n  },\n)\n\nconst PaginationPrevTrigger = forwardRef<\n  HTMLButtonElement,\n  ChakraPagination.PrevTriggerProps\n>(function PaginationPrevTrigger(props, ref) {\n  const { size } = useButtonVariant()\n  return (\n    <ChakraPagination.PrevTrigger ref={ref} asChild {...props}>\n      <IconButton variant=\"outline\" size={size}>\n        <HiChevronLeft />\n      </IconButton>\n    </ChakraPagination.PrevTrigger>\n  )\n})\n\nconst PaginationNextTrigger = forwardRef<\n  HTMLButtonElement,\n  ChakraPagination.NextTriggerProps\n>(function PaginationNextTrigger(props, ref) {\n  const { size } = useButtonVariant()\n  return (\n    <ChakraPagination.NextTrigger ref={ref} asChild {...props}>\n      <IconButton variant=\"outline\" size={size}>\n        <HiChevronRight />\n      </IconButton>\n    </ChakraPagination.NextTrigger>\n  )\n})\n\nconst PaginationItems = () => {\n  return (\n    <ChakraPagination.Context>\n      {({ pages }) =>\n        pages.map((page, index) => {\n          return page.type === \"ellipsis\" ? (\n            <Ellipsis key={index} index={index} />\n          ) : (\n            <Item key={index} type=\"page\" value={page.value} />\n          )\n        })\n      }\n    </ChakraPagination.Context>\n  )\n}\n\nconst PaginationPageText = () => {\n  const { page, pages } = usePaginationContext()\n  return (\n    <Text color=\"fg.muted\" fontWeight=\"medium\" marginX=\"3\">\n      Page <Span color=\"fg\">{page}</Span> of{\" \"}\n      <Span color=\"fg\">{pages.length}</Span>\n    </Text>\n  )\n}\n"
  },
  "component": "Pagination"
}
